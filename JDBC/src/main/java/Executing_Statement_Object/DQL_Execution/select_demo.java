package Executing_Statement_Object.DQL_Execution;

/*
 Execute DQL Statement : 
  				Select --> To execute dql statement there are two ways : 
  							1.execute() and getResultSet() methods
  							2. executeQuery() method
  							
  					1. execute() -> In this method we can pass the dql query by doing this internally the dql query 
  									will be placed in the statement object and the statement object move from java 
  									application to database, then it will execute the dql query in the database.
  									Since it is a dql query it will generate a output in the DB server to get get 
  									the output from the DB server and bring it back to the java application we need 
  									to make use of getResultSet() method.
  									
  					* getResultSet() -> getResultSet() is a non-static method that is present in Statement. 
  										By executing the getResultSet() internally it will create an Object of resultSet
  										then it will load the output which is generated by the execute() method into the 
  										ResultSet object.
  										Then this getResultSet() method will return ResultSet type of object . So to hold the 
  										we need to make use of ResultSet interface present in JDBC.
  										Internally the ResultSet has a pointer which is point at above the Row internally.
  										Now to access the record we have to move the pointer to the next row.
  					* next() -> It is non- parameterized method present in the ResultSet, this method internally first check if there
  								is row below the pointer , if the row exist than it will move the pointer to next row and 
  								it will return true . If the row is not exist it will return false.
  								By performing the next() method pointer at first row , now to access the data from the 
  								first row , we need to take help of getX() method which is present in ResultSet.
  								
  					* getX() -> In getX() method , X stands for the datatype of the column which we want to access.
  								We can access the records using getX() method in two ways : 
  								1 . by passing the column position
  								2. by passing column (name)
  								
  					 					
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class select_demo {

	public static void main(String[] args) {
		try {
			Class.forName("org.postgresql.Driver");
			System.out.println("Driver loaded");
			
			String url = "jdbc:postgresql://localhost:5432/Company";
			String user = "postgres";
			String password = "root";
			
			Connection con = DriverManager.getConnection(url, user, password);
			System.out.println("Connection Established");
			
			Statement stm = con.createStatement();
			
			String query = "select * from employees ";
			
			// way 1 using execute() and getResultSet()
			
			boolean res = stm.execute(query);
			System.out.println(res);
			ResultSet rs = stm.getResultSet();
			
			while(rs.next()) {
				System.out.println("Id :"+ rs.getInt(1));
				System.out.println("Name :" + rs.getString("name"));
				System.out.println("Salary : "+ rs.getDouble(3));
				System.out.println("Phone Number : " + rs.getLong("number"));
				System.out.println("--------------------");
			}
			System.out.println("=================================");
			// way 2 using executeQuery()
			
			ResultSet rs2 = stm.executeQuery(query);
			while(rs2.next()) {
				System.out.println("Id :"+ rs2.getInt(1));
				System.out.println("Name :" + rs2.getString("name"));
				System.out.println("Salary : "+ rs2.getDouble(3));
				System.out.println("Phone Number : " + rs2.getLong("number"));
				System.out.println("--------------------");
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
